Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-41-g9b60daf6'
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Mon Dec 26 22:39:57 2022 (1672123197.0 207.4)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyS0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 548522884736: New connection
webhooks client 548522884736: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(1465): Mon Dec 26 21:23:14 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
CONFIG_MACH_RP2040=y
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="rp2040"
CONFIG_MCU="rp2040"
CONFIG_CLOCK_FREQ=12000000
CONFIG_SERIAL=y
CONFIG_FLASH_SIZE=0x200000
CONFIG_FLASH_BOOT_ADDRESS=0x10000100
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x42000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x10000100
CONFIG_RP2040_SELECT=y
CONFIG_RP2040_HAVE_STAGE2=y
CONFIG_RP2040_FLASH_START_0100=y
# CONFIG_RP2040_FLASH_START_4000 is not set
CONFIG_RP2040_FLASH_W25Q080=y
# CONFIG_RP2040_FLASH_GENERIC_03 is not set
CONFIG_RP2040_STAGE2_FILE="boot2_w25q080.S"
CONFIG_RP2040_STAGE2_CLKDIV=2
# CONFIG_RP2040_USB is not set
CONFIG_RP2040_SERIAL_UART0=y
# CONFIG_RP2040_CANBUS is not set
# CONFIG_RP2040_USBCANBUS is not set
CONFIG_RP2040_CANBUS_GPIO_RX=4
CONFIG_RP2040_CANBUS_GPIO_TX=5
CONFIG_SERIAL_BAUD=250000
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANBUS_FREQUENCY=500000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(8140): Mon Dec 26 21:26:29 2022
Last MCU build version: v0.11.0-41-g9b60daf6
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1486124): Mon Dec 26 21:26:44 2022
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Unable to issue reset command on MCU 'mcu'
webhooks client 548522884736: Disconnected
Restarting printer
Start printer at Mon Dec 26 22:41:49 2022 (1672123309.1 319.4)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyS0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 548523093344: New connection
webhooks client 548523093344: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(1465): Mon Dec 26 21:23:14 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
CONFIG_MACH_RP2040=y
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="rp2040"
CONFIG_MCU="rp2040"
CONFIG_CLOCK_FREQ=12000000
CONFIG_SERIAL=y
CONFIG_FLASH_SIZE=0x200000
CONFIG_FLASH_BOOT_ADDRESS=0x10000100
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x42000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x10000100
CONFIG_RP2040_SELECT=y
CONFIG_RP2040_HAVE_STAGE2=y
CONFIG_RP2040_FLASH_START_0100=y
# CONFIG_RP2040_FLASH_START_4000 is not set
CONFIG_RP2040_FLASH_W25Q080=y
# CONFIG_RP2040_FLASH_GENERIC_03 is not set
CONFIG_RP2040_STAGE2_FILE="boot2_w25q080.S"
CONFIG_RP2040_STAGE2_CLKDIV=2
# CONFIG_RP2040_USB is not set
CONFIG_RP2040_SERIAL_UART0=y
# CONFIG_RP2040_CANBUS is not set
# CONFIG_RP2040_USBCANBUS is not set
CONFIG_RP2040_CANBUS_GPIO_RX=4
CONFIG_RP2040_CANBUS_GPIO_TX=5
CONFIG_SERIAL_BAUD=250000
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANBUS_FREQUENCY=500000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(8140): Mon Dec 26 21:26:29 2022
Last MCU build version: v0.11.0-41-g9b60daf6
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1486124): Mon Dec 26 21:26:44 2022
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Unable to issue reset command on MCU 'mcu'
webhooks client 548523093344: Disconnected
Restarting printer
Start printer at Mon Dec 26 22:45:45 2022 (1672123545.3 555.6)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyAMA0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 548523177920: New connection
webhooks client 548523177920: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(1465): Mon Dec 26 21:23:14 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
CONFIG_MACH_RP2040=y
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="rp2040"
CONFIG_MCU="rp2040"
CONFIG_CLOCK_FREQ=12000000
CONFIG_SERIAL=y
CONFIG_FLASH_SIZE=0x200000
CONFIG_FLASH_BOOT_ADDRESS=0x10000100
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x42000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x10000100
CONFIG_RP2040_SELECT=y
CONFIG_RP2040_HAVE_STAGE2=y
CONFIG_RP2040_FLASH_START_0100=y
# CONFIG_RP2040_FLASH_START_4000 is not set
CONFIG_RP2040_FLASH_W25Q080=y
# CONFIG_RP2040_FLASH_GENERIC_03 is not set
CONFIG_RP2040_STAGE2_FILE="boot2_w25q080.S"
CONFIG_RP2040_STAGE2_CLKDIV=2
# CONFIG_RP2040_USB is not set
CONFIG_RP2040_SERIAL_UART0=y
# CONFIG_RP2040_CANBUS is not set
# CONFIG_RP2040_USBCANBUS is not set
CONFIG_RP2040_CANBUS_GPIO_RX=4
CONFIG_RP2040_CANBUS_GPIO_TX=5
CONFIG_SERIAL_BAUD=250000
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANBUS_FREQUENCY=500000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(8140): Mon Dec 26 21:26:29 2022
Last MCU build version: v0.11.0-41-g9b60daf6
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1486124): Mon Dec 26 21:26:44 2022
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Unable to issue reset command on MCU 'mcu'
webhooks client 548523177920: Disconnected
Restarting printer
Start printer at Mon Dec 26 22:47:30 2022 (1672123650.5 660.8)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyAMA0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 548530405536: New connection
webhooks client 548530405536: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(1465): Mon Dec 26 21:23:14 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
CONFIG_MACH_RP2040=y
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="rp2040"
CONFIG_MCU="rp2040"
CONFIG_CLOCK_FREQ=12000000
CONFIG_SERIAL=y
CONFIG_FLASH_SIZE=0x200000
CONFIG_FLASH_BOOT_ADDRESS=0x10000100
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x42000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x10000100
CONFIG_RP2040_SELECT=y
CONFIG_RP2040_HAVE_STAGE2=y
CONFIG_RP2040_FLASH_START_0100=y
# CONFIG_RP2040_FLASH_START_4000 is not set
CONFIG_RP2040_FLASH_W25Q080=y
# CONFIG_RP2040_FLASH_GENERIC_03 is not set
CONFIG_RP2040_STAGE2_FILE="boot2_w25q080.S"
CONFIG_RP2040_STAGE2_CLKDIV=2
# CONFIG_RP2040_USB is not set
CONFIG_RP2040_SERIAL_UART0=y
# CONFIG_RP2040_CANBUS is not set
# CONFIG_RP2040_USBCANBUS is not set
CONFIG_RP2040_CANBUS_GPIO_RX=4
CONFIG_RP2040_CANBUS_GPIO_TX=5
CONFIG_SERIAL_BAUD=250000
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANBUS_FREQUENCY=500000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(8140): Mon Dec 26 21:26:29 2022
Last MCU build version: v0.11.0-41-g9b60daf6
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1486124): Mon Dec 26 21:26:44 2022
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Unable to issue reset command on MCU 'mcu'
webhooks client 548530405536: Disconnected
Restarting printer
Start printer at Mon Dec 26 22:49:08 2022 (1672123748.6 759.0)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyS0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 548523010512: New connection
webhooks client 548523010512: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-41-g9b60daf6'
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Mon Dec 26 22:49:41 2022 (1672123781.6 23.5)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyS0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
webhooks client 548389572368: New connection
webhooks client 548389572368: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-41-g9b60daf6'
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Mon Dec 26 22:51:22 2022 (1672123882.5 103.7)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyAMA0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 547987861120: New connection
webhooks client 547987861120: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(1465): Mon Dec 26 21:23:14 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
CONFIG_MACH_RP2040=y
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="rp2040"
CONFIG_MCU="rp2040"
CONFIG_CLOCK_FREQ=12000000
CONFIG_SERIAL=y
CONFIG_FLASH_SIZE=0x200000
CONFIG_FLASH_BOOT_ADDRESS=0x10000100
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x42000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x10000100
CONFIG_RP2040_SELECT=y
CONFIG_RP2040_HAVE_STAGE2=y
CONFIG_RP2040_FLASH_START_0100=y
# CONFIG_RP2040_FLASH_START_4000 is not set
CONFIG_RP2040_FLASH_W25Q080=y
# CONFIG_RP2040_FLASH_GENERIC_03 is not set
CONFIG_RP2040_STAGE2_FILE="boot2_w25q080.S"
CONFIG_RP2040_STAGE2_CLKDIV=2
# CONFIG_RP2040_USB is not set
CONFIG_RP2040_SERIAL_UART0=y
# CONFIG_RP2040_CANBUS is not set
# CONFIG_RP2040_USBCANBUS is not set
CONFIG_RP2040_CANBUS_GPIO_RX=4
CONFIG_RP2040_CANBUS_GPIO_TX=5
CONFIG_SERIAL_BAUD=250000
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANBUS_FREQUENCY=500000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(8140): Mon Dec 26 21:26:29 2022
Last MCU build version: v0.11.0-41-g9b60daf6
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1486124): Mon Dec 26 21:26:44 2022
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Unable to issue reset command on MCU 'mcu'
webhooks client 547987861120: Disconnected
Restarting printer
Start printer at Mon Dec 26 22:53:41 2022 (1672124021.3 242.5)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyAMA0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 547988154160: New connection
webhooks client 547988154160: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-41-g9b60daf6'
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Mon Dec 26 22:53:53 2022 (1672124033.6 254.8)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyS0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
webhooks client 547653201488: New connection
webhooks client 547653201488: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
mcu 'mcu': Unable to open serial port: Could not configure port: (5, 'Input/output error')
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(1465): Mon Dec 26 21:23:14 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
CONFIG_MACH_RP2040=y
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="rp2040"
CONFIG_MCU="rp2040"
CONFIG_CLOCK_FREQ=12000000
CONFIG_SERIAL=y
CONFIG_FLASH_SIZE=0x200000
CONFIG_FLASH_BOOT_ADDRESS=0x10000100
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x42000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x10000100
CONFIG_RP2040_SELECT=y
CONFIG_RP2040_HAVE_STAGE2=y
CONFIG_RP2040_FLASH_START_0100=y
# CONFIG_RP2040_FLASH_START_4000 is not set
CONFIG_RP2040_FLASH_W25Q080=y
# CONFIG_RP2040_FLASH_GENERIC_03 is not set
CONFIG_RP2040_STAGE2_FILE="boot2_w25q080.S"
CONFIG_RP2040_STAGE2_CLKDIV=2
# CONFIG_RP2040_USB is not set
CONFIG_RP2040_SERIAL_UART0=y
# CONFIG_RP2040_CANBUS is not set
# CONFIG_RP2040_USBCANBUS is not set
CONFIG_RP2040_CANBUS_GPIO_RX=4
CONFIG_RP2040_CANBUS_GPIO_TX=5
CONFIG_SERIAL_BAUD=250000
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANBUS_FREQUENCY=500000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(8140): Mon Dec 26 21:26:29 2022
Last MCU build version: v0.11.0-41-g9b60daf6
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1486124): Mon Dec 26 21:26:44 2022
Unable to issue reset command on MCU 'mcu'
webhooks client 547653201488: Disconnected
Restarting printer
Start printer at Mon Dec 26 22:55:28 2022 (1672124128.3 349.5)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyAMA0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 547654194080: New connection
webhooks client 547654194080: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(1465): Mon Dec 26 21:23:14 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
CONFIG_MACH_RP2040=y
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="rp2040"
CONFIG_MCU="rp2040"
CONFIG_CLOCK_FREQ=12000000
CONFIG_SERIAL=y
CONFIG_FLASH_SIZE=0x200000
CONFIG_FLASH_BOOT_ADDRESS=0x10000100
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x42000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x10000100
CONFIG_RP2040_SELECT=y
CONFIG_RP2040_HAVE_STAGE2=y
CONFIG_RP2040_FLASH_START_0100=y
# CONFIG_RP2040_FLASH_START_4000 is not set
CONFIG_RP2040_FLASH_W25Q080=y
# CONFIG_RP2040_FLASH_GENERIC_03 is not set
CONFIG_RP2040_STAGE2_FILE="boot2_w25q080.S"
CONFIG_RP2040_STAGE2_CLKDIV=2
# CONFIG_RP2040_USB is not set
CONFIG_RP2040_SERIAL_UART0=y
# CONFIG_RP2040_CANBUS is not set
# CONFIG_RP2040_USBCANBUS is not set
CONFIG_RP2040_CANBUS_GPIO_RX=4
CONFIG_RP2040_CANBUS_GPIO_TX=5
CONFIG_SERIAL_BAUD=250000
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANBUS_FREQUENCY=500000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(8140): Mon Dec 26 21:26:29 2022
Last MCU build version: v0.11.0-41-g9b60daf6
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1486124): Mon Dec 26 21:26:44 2022
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Unable to issue reset command on MCU 'mcu'
webhooks client 547654194080: Disconnected
Restarting printer
Start printer at Mon Dec 26 22:57:56 2022 (1672124276.2 497.4)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyAMA0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 547653201008: New connection
webhooks client 547653201008: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-41-g9b60daf6'
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Mon Dec 26 22:58:38 2022 (1672124318.6 24.5)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyAMA0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 547924413456: New connection
webhooks client 547924413456: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-41-g9b60daf6'
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
Start printer at Mon Dec 26 23:00:10 2022 (1672124410.4 96.4)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyAMA0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 547938901632: New connection
webhooks client 547938901632: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(1465): Mon Dec 26 21:23:14 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
CONFIG_MACH_RP2040=y
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="rp2040"
CONFIG_MCU="rp2040"
CONFIG_CLOCK_FREQ=12000000
CONFIG_SERIAL=y
CONFIG_FLASH_SIZE=0x200000
CONFIG_FLASH_BOOT_ADDRESS=0x10000100
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x42000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x10000100
CONFIG_RP2040_SELECT=y
CONFIG_RP2040_HAVE_STAGE2=y
CONFIG_RP2040_FLASH_START_0100=y
# CONFIG_RP2040_FLASH_START_4000 is not set
CONFIG_RP2040_FLASH_W25Q080=y
# CONFIG_RP2040_FLASH_GENERIC_03 is not set
CONFIG_RP2040_STAGE2_FILE="boot2_w25q080.S"
CONFIG_RP2040_STAGE2_CLKDIV=2
# CONFIG_RP2040_USB is not set
CONFIG_RP2040_SERIAL_UART0=y
# CONFIG_RP2040_CANBUS is not set
# CONFIG_RP2040_USBCANBUS is not set
CONFIG_RP2040_CANBUS_GPIO_RX=4
CONFIG_RP2040_CANBUS_GPIO_TX=5
CONFIG_SERIAL_BAUD=250000
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANBUS_FREQUENCY=500000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(8140): Mon Dec 26 21:26:29 2022
Last MCU build version: v0.11.0-41-g9b60daf6
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1486124): Mon Dec 26 21:26:44 2022
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Unable to issue reset command on MCU 'mcu'
webhooks client 547938901632: Disconnected
Restarting printer
Start printer at Mon Dec 26 23:02:17 2022 (1672124537.0 223.0)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyAMA0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 547938900048: New connection
webhooks client 547938900048: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(1465): Mon Dec 26 21:23:14 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
CONFIG_MACH_RP2040=y
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="rp2040"
CONFIG_MCU="rp2040"
CONFIG_CLOCK_FREQ=12000000
CONFIG_SERIAL=y
CONFIG_FLASH_SIZE=0x200000
CONFIG_FLASH_BOOT_ADDRESS=0x10000100
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x42000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x10000100
CONFIG_RP2040_SELECT=y
CONFIG_RP2040_HAVE_STAGE2=y
CONFIG_RP2040_FLASH_START_0100=y
# CONFIG_RP2040_FLASH_START_4000 is not set
CONFIG_RP2040_FLASH_W25Q080=y
# CONFIG_RP2040_FLASH_GENERIC_03 is not set
CONFIG_RP2040_STAGE2_FILE="boot2_w25q080.S"
CONFIG_RP2040_STAGE2_CLKDIV=2
# CONFIG_RP2040_USB is not set
CONFIG_RP2040_SERIAL_UART0=y
# CONFIG_RP2040_CANBUS is not set
# CONFIG_RP2040_USBCANBUS is not set
CONFIG_RP2040_CANBUS_GPIO_RX=4
CONFIG_RP2040_CANBUS_GPIO_TX=5
CONFIG_SERIAL_BAUD=250000
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANBUS_FREQUENCY=500000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(8140): Mon Dec 26 21:26:29 2022
Last MCU build version: v0.11.0-41-g9b60daf6
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1486124): Mon Dec 26 21:26:44 2022
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Unable to issue reset command on MCU 'mcu'
webhooks client 547938900048: Disconnected
Restarting printer
Start printer at Mon Dec 26 23:04:26 2022 (1672124666.4 352.4)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyAMA0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 547938774512: New connection
webhooks client 547938774512: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(1465): Mon Dec 26 21:23:14 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
CONFIG_MACH_RP2040=y
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="rp2040"
CONFIG_MCU="rp2040"
CONFIG_CLOCK_FREQ=12000000
CONFIG_SERIAL=y
CONFIG_FLASH_SIZE=0x200000
CONFIG_FLASH_BOOT_ADDRESS=0x10000100
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x42000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x10000100
CONFIG_RP2040_SELECT=y
CONFIG_RP2040_HAVE_STAGE2=y
CONFIG_RP2040_FLASH_START_0100=y
# CONFIG_RP2040_FLASH_START_4000 is not set
CONFIG_RP2040_FLASH_W25Q080=y
# CONFIG_RP2040_FLASH_GENERIC_03 is not set
CONFIG_RP2040_STAGE2_FILE="boot2_w25q080.S"
CONFIG_RP2040_STAGE2_CLKDIV=2
# CONFIG_RP2040_USB is not set
CONFIG_RP2040_SERIAL_UART0=y
# CONFIG_RP2040_CANBUS is not set
# CONFIG_RP2040_USBCANBUS is not set
CONFIG_RP2040_CANBUS_GPIO_RX=4
CONFIG_RP2040_CANBUS_GPIO_TX=5
CONFIG_SERIAL_BAUD=250000
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANBUS_FREQUENCY=500000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(8140): Mon Dec 26 21:26:29 2022
Last MCU build version: v0.11.0-41-g9b60daf6
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1486124): Mon Dec 26 21:26:44 2022
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Unable to issue reset command on MCU 'mcu'
webhooks client 547938774512: Disconnected
Restarting printer
Start printer at Mon Dec 26 23:06:03 2022 (1672124763.1 449.1)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyAMA0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 547939721168: New connection
webhooks client 547939721168: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(1465): Mon Dec 26 21:23:14 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
CONFIG_MACH_RP2040=y
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="rp2040"
CONFIG_MCU="rp2040"
CONFIG_CLOCK_FREQ=12000000
CONFIG_SERIAL=y
CONFIG_FLASH_SIZE=0x200000
CONFIG_FLASH_BOOT_ADDRESS=0x10000100
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x42000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x10000100
CONFIG_RP2040_SELECT=y
CONFIG_RP2040_HAVE_STAGE2=y
CONFIG_RP2040_FLASH_START_0100=y
# CONFIG_RP2040_FLASH_START_4000 is not set
CONFIG_RP2040_FLASH_W25Q080=y
# CONFIG_RP2040_FLASH_GENERIC_03 is not set
CONFIG_RP2040_STAGE2_FILE="boot2_w25q080.S"
CONFIG_RP2040_STAGE2_CLKDIV=2
# CONFIG_RP2040_USB is not set
CONFIG_RP2040_SERIAL_UART0=y
# CONFIG_RP2040_CANBUS is not set
# CONFIG_RP2040_USBCANBUS is not set
CONFIG_RP2040_CANBUS_GPIO_RX=4
CONFIG_RP2040_CANBUS_GPIO_TX=5
CONFIG_SERIAL_BAUD=250000
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANBUS_FREQUENCY=500000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(8140): Mon Dec 26 21:26:29 2022
Last MCU build version: v0.11.0-41-g9b60daf6
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1486124): Mon Dec 26 21:26:44 2022
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
Unable to issue reset command on MCU 'mcu'
webhooks client 547939721168: Disconnected
Restarting printer
Start printer at Mon Dec 26 23:11:47 2022 (1672125107.8 793.8)
===== Config file =====
[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	CLEAR_PAUSE
	M117 Print Starting...
	{% set T_BED = params.T_BED|default(190)|float %}
	{% set T_EXTRUDER = params.T_EXTRUDER|default(60)|float %}
	M109 S{T_EXTRUDER}
	M190 S{T_BED}
	M117 Homing All...
	G28
	G92 E0
	G90
	G92 E0
	G1 X15 Y10 Z5 F6000
	M117 Waiting for Temps
	M190 S{T_BED}
	M109 S{T_EXTRUDER}
	PRIME_LINE
	M117 Printing.....

[gcode_macro END_PRINT]
gcode = 
	SAVE_GCODE_STATE NAME=end_print
	M117 Done printing
	G91
	G1 E-10 F3600
	G1 Z50
	G4 P1000
	G90
	
	
	
	
	
	
	
	
	
	
	{% set x_max = printer.toolhead.axis_minimum.x|float + 25.0 %}
	{% set y_max = printer.toolhead.axis_minimum.y|float + 25.0 %}
	G1 X{x_max} Y{y_max} F2000
	
	M104 S0
	M140 S0
	RESTORE_GCODE_STATE NAME=end_print
	M84

[gcode_macro PRIME_LINE]
gcode = 
	M117 Prime Line
	G92 E0
	
	G1 Z2.0 F3000
	
	G1 X2 Y2 Z2.28 F5000
	G1 X2 Y50 Z2.28 F500 E15
	G1 X3 Y50 Z2.28 F5000
	G1 X3 Y5 Z2.28 F500 E30
	G92 E0
	G1 Z2.0 F3000

[gcode_macro M205]
gcode = 
	{% if 'X' in params %}
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ X }
	{% endif %}

[gcode_macro M600]
gcode = 
	{% set X = params.X|default(50)|float %}
	{% set Y = params.Y|default(0)|float %}
	{% set Z = params.Z|default(10)|float %}
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F3000
	G91
	G1 E-50 F1000
	SET_IDLE_TIMEOUT TIMEOUT=86400
	M117 Paused
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD]
gcode = 
	SAVE_GCODE_STATE NAME=loading_filament
	M83
	G92 E0.0
	G1 E40 F500
	G1 E40 F100
	G92 E0.0
	RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD]
gcode = 
	SAVE_GCODE_STATE NAME=unloading_filament
	G91
	G1 E10 F100
	G92 E0.0
	G1 E-50 F1000
	G92 E0.0
	RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[bed_screws]
screw1 = 60,5
screw1_name = front screw
screw2 = 5,115
screw2_name = back left
screw3 = 115,115
screw3_name = back right

[gcode_macro PRESSURE_ADVANCE_LIST]
description = List all filament pressure advance settings
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
	{% for filament in pa_dic|sort(attribute='id') %}
	{% set _dummy = out.append("%s" % filament.id) %}
	{% for setup in filament.val|sort(attribute='nozzle') %}
	{% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" %
	(setup.nozzle, setup.pa, setup.st)) %}
	{% endfor %}
	{% endfor %}
	{action_respond_info(out|join("\n"))}
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description = Add or change pressure advance settings
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
	{% else %}
	{% set cfg = printer.configfile.settings.extruder %}
	{% set id = params.FILAMENT|string %}
	{% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
	{% set pa_dic = [{'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
	{% else %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set change_txt = [] %}
	{% if 'PRESSURE_ADVANCE' in params|upper %}
	{% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
	{% endif %}
	{% if 'SMOOTH_TIME' in params|upper %}
	{% set _dummy = change_txt.append("SMOOTH TIME") %}
	{% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
	{% endif %}
	{% if change_txt|length > 0 %}
	{action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
	{% endif%}
	{% endfor %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
	{% set _dummy = pa_dic.append({'id' : id,
	'val': [{'nozzle': nozzle,
	'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3),
	'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description = Remove a filament or a nezzle setup
gcode = 
	{% if 'FILAMENT' not in params|upper %}
	{action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
	{% else %}
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
	{% else %}
	{% set id = params.FILAMENT|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% if 'NOZZLE' in params|upper %}
	{% set nozzle = params.NOZZLE|float|round(2) %}
	{% set id_index = loop.index0 %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
	{% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
	{% endif%}
	{% endfor %}
	{% else %}
	{action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
	{% set _dummy = pa_dic.pop(loop.index0) %}
	{% endif %}
	{% elif loop.last %}
	{action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
	{% endif %}
	{% endfor %}
	{% endif %}
	SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
	{% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description = Set PA depending on nozzle and filament
gcode = 
	{% if not printer.save_variables.variables.pressure_advance %}
	{action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
	{% else %}
	{% set nozzle = params.NOZZLE|default(0.4)|float %}
	{% set id = params.FILAMENT|default('None')|string %}
	{% set pa_dic = printer.save_variables.variables.pressure_advance %}
	{% set found = {'id'    : 'default',
	'nozzle': 0.4,
	'pa'    : printer.configfile.settings.extruder.pressure_advance,
	'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
	{% for filament in pa_dic %}
	{% if id == filament.id %}
	{% for setup in filament.val %}
	{% if nozzle == setup.nozzle %}
	{% set _dummy = found.update({'id': filament.id}) %}
	{% set _dummy = found.update({'nozzle': setup.nozzle}) %}
	{% set _dummy = found.update({'pa': setup.pa}) %}
	{% set _dummy = found.update({'st': setup.st}) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
	{action_respond_info("PRESSURE ADVANCE:
	Filament: %s   Nozzle: %1.02f
	Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
	{% endif %}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[neopixel bedled]
pin = gpio24
chain_count = 1
color_order = RGBW
initial_red = 0.1
initial_green = 0
initial_blue = 1

[input_shaper]
shaper_freq_x = 71.6
shaper_type_x = mzv
shaper_freq_y = 73.8
shaper_type_y = mzv

[gcode_shell_command generate_belt_tension_graph]
command = sh /home/pi/scripts/generate_belt_tension_graph.sh
timeout = 90.
verbose = True

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[save_variables]
filename = ~/printer_data/config/.variables.stb

[virtual_sdcard]
path = ~/printer_data/gcodes

[mcu]
serial = /dev/ttyAMA0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 6000
max_z_velocity = 15
max_z_accel = 45
square_corner_velocity = 6.0

[stepper_x]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio4
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = gpio6
dir_pin = gpio5
enable_pin = !gpio7
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = ^gpio3
position_endstop = 118
position_max = 118
homing_speed = 50
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
interpolate = False
run_current = 0.5
sense_resistor = 0.110
stealthchop_threshold = 9999

[stepper_z]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
rotation_distance = 8
microsteps = 16
endstop_pin = ^gpio25
position_endstop = -0.410
position_max = 120
position_min = -1.5
homing_speed = 10
second_homing_speed = 3.0
homing_retract_dist = 3.0

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
step_pin = gpio14
dir_pin = gpio13
enable_pin = !gpio15
rotation_distance = 22.67895
gear_ratio = 50:10
microsteps = 16
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = gpio23
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio27
control = pid
pid_kp = 22.655
pid_ki = 1.007
pid_kd = 127.433
min_temp = 0
max_temp = 270
min_extrude_temp = 0
max_extrude_only_distance = 1400.0
max_extrude_only_velocity = 75.0
max_extrude_only_accel = 1500

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
interpolate = False
run_current = 0.6
sense_resistor = 0.110
stealthchop_threshold = 0

[heater_bed]
heater_pin = gpio21
sensor_type = ATC Semitec 104GT-2
sensor_pin = gpio26
smooth_time = 3.0
max_power = 0.4
min_temp = 0
max_temp = 120
control = pid
pid_kp = 35.329
pid_ki = 0.736
pid_kd = 423.950

[heater_fan hotend_fan]
pin = gpio18
max_power = 1.0
heater = extruder
heater_temp = 50.0

[fan]
pin = gpio17
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[idle_timeout]
timeout = 36000

[safe_z_home]
home_xy_position = 118,118
speed = 50.0
z_hop = 5
=======================
Extruder max_extrude_ratio=0.266081
mcu 'mcu': Starting serial connect
webhooks client 548013640528: New connection
webhooks client 548013640528: Client info {'program': 'Moonraker', 'version': 'v0.7.1-783-gf7d8af6'}
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
mcu 'mcu': Timeout on connect
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 777, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 182, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 176, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 263, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/klippy.py", line 263, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
  File "/home/pi/klipper/klippy/mcu.py", line 782, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
Build file /home/pi/klipper/klippy/../.config(1465): Mon Dec 26 21:23:14 2022
========= Last MCU build config =========
CONFIG_LOW_LEVEL_OPTIONS=y
# CONFIG_MACH_AVR is not set
# CONFIG_MACH_ATSAM is not set
# CONFIG_MACH_ATSAMD is not set
# CONFIG_MACH_LPC176X is not set
# CONFIG_MACH_STM32 is not set
CONFIG_MACH_RP2040=y
# CONFIG_MACH_PRU is not set
# CONFIG_MACH_LINUX is not set
# CONFIG_MACH_SIMU is not set
CONFIG_BOARD_DIRECTORY="rp2040"
CONFIG_MCU="rp2040"
CONFIG_CLOCK_FREQ=12000000
CONFIG_SERIAL=y
CONFIG_FLASH_SIZE=0x200000
CONFIG_FLASH_BOOT_ADDRESS=0x10000100
CONFIG_RAM_START=0x20000000
CONFIG_RAM_SIZE=0x42000
CONFIG_STACK_SIZE=512
CONFIG_FLASH_APPLICATION_ADDRESS=0x10000100
CONFIG_RP2040_SELECT=y
CONFIG_RP2040_HAVE_STAGE2=y
CONFIG_RP2040_FLASH_START_0100=y
# CONFIG_RP2040_FLASH_START_4000 is not set
CONFIG_RP2040_FLASH_W25Q080=y
# CONFIG_RP2040_FLASH_GENERIC_03 is not set
CONFIG_RP2040_STAGE2_FILE="boot2_w25q080.S"
CONFIG_RP2040_STAGE2_CLKDIV=2
# CONFIG_RP2040_USB is not set
CONFIG_RP2040_SERIAL_UART0=y
# CONFIG_RP2040_CANBUS is not set
# CONFIG_RP2040_USBCANBUS is not set
CONFIG_RP2040_CANBUS_GPIO_RX=4
CONFIG_RP2040_CANBUS_GPIO_TX=5
CONFIG_SERIAL_BAUD=250000
CONFIG_USB_VENDOR_ID=0x1d50
CONFIG_USB_DEVICE_ID=0x614e
CONFIG_USB_SERIAL_NUMBER="12345"
CONFIG_CANBUS_FREQUENCY=500000
CONFIG_INITIAL_PINS=""
CONFIG_HAVE_GPIO=y
CONFIG_HAVE_GPIO_ADC=y
CONFIG_HAVE_GPIO_SPI=y
CONFIG_HAVE_GPIO_I2C=y
CONFIG_HAVE_GPIO_HARD_PWM=y
CONFIG_HAVE_GPIO_BITBANGING=y
CONFIG_HAVE_STRICT_TIMING=y
CONFIG_HAVE_CHIPID=y
CONFIG_HAVE_STEPPER_BOTH_EDGE=y
CONFIG_INLINE_STEPPER_HACK=y
=======================
Build file /home/pi/klipper/klippy/../out/klipper.dict(8140): Mon Dec 26 21:26:29 2022
Last MCU build version: v0.11.0-41-g9b60daf6
Last MCU build tools: gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
Last MCU build config: ADC_MAX=4095 BUS_PINS_i2c0a=gpio0,gpio1 BUS_PINS_i2c0b=gpio4,gpio5 BUS_PINS_i2c0c=gpio8,gpio9 BUS_PINS_i2c0d=gpio12,gpio13 BUS_PINS_i2c0e=gpio16,gpio17 BUS_PINS_i2c0f=gpio20,gpio21 BUS_PINS_i2c0g=gpio24,gpio25 BUS_PINS_i2c0h=gpio28,gpio29 BUS_PINS_i2c1a=gpio2,gpio3 BUS_PINS_i2c1b=gpio6,gpio7 BUS_PINS_i2c1c=gpio10,gpio11 BUS_PINS_i2c1d=gpio14,gpio15 BUS_PINS_i2c1e=gpio18,gpio19 BUS_PINS_i2c1f=gpio22,gpio23 BUS_PINS_i2c1g=gpio26,gpio27 BUS_PINS_spi0a=gpio0,gpio3,gpio2 BUS_PINS_spi0b=gpio4,gpio7,gpio6 BUS_PINS_spi0c=gpio16,gpio19,gpio18 BUS_PINS_spi0d=gpio20,gpio23,gpio22 BUS_PINS_spi1a=gpio8,gpio11,gpio10 BUS_PINS_spi1b=gpio12,gpio15,gpio14 BUS_PINS_spi1c=gpio24,gpio27,gpio26 CLOCK_FREQ=12000000 MCU=rp2040 PWM_MAX=255 RECEIVE_WINDOW=192 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Build file /home/pi/klipper/klippy/../out/klipper.elf(1486124): Mon Dec 26 21:26:44 2022
mcu 'mcu': Wait for identify_response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/serialhdl.py", line 68, in _get_identify_data
    params = self.send_with_response(msg, 'identify_response')
  File "/home/pi/klipper/klippy/serialhdl.py", line 259, in send_with_response
    return src.get_response([cmd], self.default_cmd_queue)
  File "/home/pi/klipper/klippy/serialhdl.py", line 316, in get_response
    self.serial.raw_send_wait_ack(cmds[-1], minclock, reqclock,
  File "/home/pi/klipper/klippy/serialhdl.py", line 251, in raw_send_wait_ack
    self._error("Serial connection closed")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Serial connection closed
